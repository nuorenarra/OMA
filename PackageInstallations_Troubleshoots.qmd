---
title: "Troubleshooting tips for installing miaverse packages"
output: html_document
---

```{r}
#| label = "setup",
#| include = FALSE
knitr::opts_chunk$set(echo = TRUE)
```


First of all, please ensure that you have an up-to-date version of R
(this note is based on R 4.3.1).

## Mac M1 user

When attempting to install miaverse packages, you may encounter
installation failures related to the 'scuttle' and 'scater'
dependencies, which require a gcc compiler for installation. The error
message might resemble the following:

```
ld: warning: directory not found for option
'-L/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0'
ld: warning: directory not found for option '-L/opt/gfortran/lib'
ld: library not found for -lgfortran
clang: error: linker command failed with exit code 1 (use -v to see
invocation)
```

This error indicates that R is unable to locate the 'libgfortran'
during the package compilation process. If you encounter this error,
you can use the following workaround:

1. Install 2 essentials tools in order to compile R for macOS as
described in [Mac-r-project](https://mac.r-project.org/tools/)

- install the xcode:
	- sudo xcode-select --install
- GNU Fortran compiler*
	- download from
	[here](https://mac.r-project.org/tools/gfortran-12.2-universal.pkg)
	*you can also install from package manager for example homebrew,
	but it is not reccomended.

2. Locate the gfortran using `which gfortran` to find the version of
gfortran that is stored in your ~/.bashrc or ~/bash_profile. Make sure
it pointing to the gfortran that you want to use. For example if you
have both homebrew and mac-r project gfortran, you may want to add the
mac-r project gfortran to your $PATH variable.

- add `export PATH="/opt/gfortran/bin:$PATH"` to your ~/.bash_profile
or ~/.bashrc, followed by `source ~/.bash_profile` in your terminal

3. Modify your `/Library/Frameworks/R.framework/Resources/etc/Makeconf`

	from:

	```
	FLIBS =  -L/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.2.0     /11.0.0 -L/opt/R/arm64/gfortran/lib -lgfortran -lemutls_w -lm
	```
	to*:

	```
	FLIBS =  -L/opt/gfortran/lib/gcc/aarch64-apple-darwin20.0/12.2.0       -L/opt/gfortran/lib -lgfortran -lm -lquadmath
	```
*note that the path is depend on your installations site, sometimes it
is located in `/usr/local/gfortran/lib` so you have to change
`/opt/gfortran/lib` accordingly in the lines above.

After all of those steps, you can follow the installations based on
Bioconductor page. For example for mia package:

```
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("mia")
```

If the installations prompt to compile from source, you can answer yes,
and hopefully it can be successfully compiled. Good Luck!

Follow-up reading:

- https://support.bioconductor.org/p/9138121/
- https://medium.com/biosyntax/following-up-library-dependency-when-compiling-r-packages-89f191b9f227


Session info at the time of writing

```
sessionInfo()
R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Big Sur 11.6

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Helsinki
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
 [1] compiler_4.3.1    bookdown_0.36     fastmap_1.1.1     cli_3.6.1
 [5] htmltools_0.5.6.1 tools_4.3.1       rstudioapi_0.15.0 yaml_2.3.7
 [9] rmarkdown_2.25    knitr_1.44        xfun_0.40         digest_0.6.33
[13] rlang_1.1.1       evaluate_0.22
```

## Linux user

::: {.callout-note}
The easiest method to run this book is by using Docker. See instructions in
[README](https://github.com/microbiome/OMA?tab=readme-ov-file#docker-installation).
It is recommended to try using Docker before attempting the steps below.
:::

On Linux, most packages require compilation from source. To do so, the system
requires a series of libraries. Below, you will find the commands that will
install the required packages. There is a good chance that distributions based
on the described below also require the same packages.

### Ubuntu

It was tested on Ubuntu 24.04.2 (Noble Numbat).

```sh
sudo apt update
sudo apt install -y \
	cmake \
	libxml2-dev libssl-dev \
	libgsl-dev \
	libgmp-dev \
	libcairo2-dev \
	libharfbuzz-dev \
	libfribidi-dev \
	libmpfr-dev \
	libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev \
	default-jdk
```

Session info at the time of writing:

```
> sessionInfo()
R version 4.4.3 (2025-02-28)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 24.04.2 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: Europe/Helsinki
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.4.3
```

For Ubuntu package, please see [here](https://packages.ubuntu.com/)

### Debian

It was tested on Debian 12.10 (Bookworm).

```sh
sudo apt install -y \
	cmake \
	libgmp-dev \
	libssl-dev \
	libgsl-dev \
	libcurl4-openssl-dev \
	libnode-dev \
	libmpfr-dev \
	libcairo2-dev \
	libharfbuzz-dev \
	libfribidi-dev \
	libfreetype6-dev \
	libpng-dev \
	libtiff5-dev \
	libxml2-dev \
	default-jdk
```

Session info at the time of writing:

```
> sessionInfo()
R version 4.4.3 (2025-02-28)
Platform: x86_64-pc-linux-gnu
Running under: Debian GNU/Linux 12 (bookworm)

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.11.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.11.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: Europe/Helsinki
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.4.3
```

### Fedora

It was tested on Fedora 41.

```sh
sudo dnf install -y \
	cmake \
	openssl-devel \
	fontconfig-devel \
	curl-devel \
	gmp-devel \
	gsl-devel \
	mpfr-devel \
	v8-devel \
	fribidi-devel \
	libjpeg-turbo-devel \
	freetype-devel \
	libpng-devel \
	libtiff-devel \
	libjpeg-devel
```

Session info at the time of writing:

```
> sessionInfo()
R version 4.4.3 (2025-02-28)
Platform: x86_64-redhat-linux-gnu
Running under: Fedora Linux 41 (KDE Plasma)

Matrix products: default
BLAS/LAPACK: FlexiBLAS OPENBLAS-OPENMP;  LAPACK version 3.12.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

time zone: Europe/Helsinki
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.4.3
```
