# Example solutions for exercises {#sec-example-solutions}

```{r}
#| label: setup
#| echo: false
#| results: asis

library(rebook)
chapterPreamble()

knitr::opts_chunk$set(warning = FALSE, message = FALSE, output = FALSE)
```

## Introduction

These example solutions are related to exercises in
[@sec-microbiome-in-bioconductor] and [@sec-ecosystem].

```{r}
#| label: intro
#| code-fold: true
#| code-summary: "Show the solution"

```

## Data containers

These example solutions are related to exercises in [@sec-containers].

```{r}
#| label: containers
#| code-fold: true
#| code-summary: "Show the solution"

```

## Import

These example solutions are related to exercises in [@sec-import].

```{r}
#| label: import
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Convert & export

These example solutions are related to exercises in [@sec-convert].

```{r}
#| label: convert
#| code-fold: true
#| code-summary: "Show the solution"

# Load example dataset
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns

# Convert to Phyloseq and reconvert to a new Dataset
ps <- convertToPhyloseq(tse)
tse_new <- convertFromPhyloseq(ps)

# Save the reconverted file to a RDS file and read it
saveRDS(tse_new, "tse.rds")
tse_read <- readRDS("tse.rds")

# Converting TreeSE to long format and writing it in a CSV file
lf <- meltSE(tse_read)
write.csv(lf, "long_format_tse.csv")
```

## Taxonomic information

These example solutions are related to exercises in
[@sec-taxonomic-information].

```{r}
#| label: taxonomy
#| code-fold: true
#| code-summary: "Show the solution"

# load example dataset
library(mia)
library(miaViz)
data("Tengeler2020", package = "mia")
tse <- Tengeler2020

# Available taxonomic ranks
taxonomyRanks(tse)

# Unique taxonomic features from class
getUnique(tse, rank = "Order")

# Subsets the data and aligns the tree
tse_sub <- tse[1:15, ]
rowTree(tse_sub)$Nnode

tse_sub <- subsetByLeaf(tse_sub, rowLeaf = rownames(tse_sub))
rowTree(tse_sub)$Nnode

# Creates plot for the phylogeny
p1 <- plotRowTree(tse_sub)

# Creates taxonomic tree
tse_sub_hierarchy <- tse_sub
tse_sub_hierarchy <- addHierarchyTree(tse_sub_hierarchy)

# Creates plot for the taxonomic tree
p2 <- plotRowTree(tse_sub_hierarchy)

# Plots trees
library(patchwork)
p1 + p2
```

## Data wrangling

These example solutions are related to exercises in [@sec-datawrangling].

```{r}
#| label: wrangling
#| code-fold: true
#| code-summary: "Show the solution"

# Load first example dataset
library(mia)
data("enterotype", package = "mia")
tse <- enterotype

# Visualize column metadata
colData(tse) |> head()

# Create variable 'group' containing 3 random classifications for each entry
tse[["group"]] <- sample(
    c("group_1", "group_2", "group_3"),
    ncol(tse),
    replace = TRUE
)

# Plot how groups are distributed
library(miaViz)
plotBarplot(tse, col.var = "group")

# Split groups into two different tse objects and outputs a list
tse_list <- splitOn(tse, by = 2, group = "group")

# Count numbers of entries in the group
tse_list[[1]][["group"]] |> table()
tse_list[[2]][["group"]] |> table()
tse_list[[3]][["group"]] |> table()

# Sum the abundances correspondent to each group and
# merge them back into a single tse object
tse_list <- lapply(tse_list, function(x){
    mat <- assay(x, "counts")
    sum_val <- sum(mat)
    x[["summed_value"]] <- sum_val
    return(x)
})
tse <- unsplitOn(tse_list)

# Load second example dataset and merges them
data("GlobalPatterns")
tse <- mergeSEs(tse, GlobalPatterns)
colData(tse)
```

## Exploration & quality control

These example solutions are related to exercises in [@sec-quality-control].

```{r}
#| label: qc
#| code-fold: true
#| code-summary: "Show the solution"

# Load example dataset
library(mia)
library(miaViz)
library(scuttle)
data("GlobalPatterns")
tse <- GlobalPatterns

# Plot counts with a histogram
plotHistogram(tse, assay.type = "counts")

# Add prevalence to rowData
tse <- addPrevalence(tse)

# Plot the distribution of prevalence values
plotHistogram(tse, row.var = "prevalence")

# Add library size to colData
tse <- addPerCellQCMetrics(tse)
# And visualize them
plotHistogram(tse, col.var = "total")

# Plot categorical values with a barplot
plotBarplot(tse, col.var = "SampleType")

# Available taxonomic ranks
taxonomyRanks(tse)

# Checks the dominance of genera
summarizeDominance(tse, rank = "Genus")

# Get the most prevalent taxa
getPrevalent(tse, rank = "Genus", prevalence = 0.2, detection = 1)

# Get the most abundant taxa based on their median abundance
getTop(tse, method = "median")

# Visualzie the most prevalent features
plotAbundanceDensity(tse)
```

## Subsetting

These example solutions are related to exercises in [@sec-subsetting].

```{r}
#| label: subsetting
#| code-fold: true
#| code-summary: "Show the solution"

# Loading one of the available example datasets
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns

# Adds total size of all libraries to colData
library(scuttle)
tse <- addPerCellQCMetrics(tse)

# Visualizes colData and plots distribution of library sizes
colData(tse) |> head()
library(miaViz)
plotHistogram(x = tse, col.var = "total")

# Subsets based on library size and then subsets again based on feature prevalence
tse_library <- tse[, tse$total > 500000]
tse_subset <- subsetByPrevalent(tse_library, detection = 1, prevalence = 2/10)
```

## Agglomeration

These example solutions are related to exercises in [@sec-agglomeration].

```{r}
#| label: agglomeration
#| code-fold: true
#| code-summary: "Show the solution"

# Load packages and dataset
library(mia)
data("GlobalPatterns")
tse <- GlobalPatterns

# Show taxonomic ranks
taxonomyRanks(tse)

# Show the unique values for a rank
getUnique(tse, rank = "Phylum")

# Agglomerate by rank and shows # of rows
tse_agglomerated <- agglomerateByRank(tse, rank = "Phylum")
nrow(tse_agglomerated)

# Show rowData
rowData(tse_agglomerated)

# Agglomerate by all ranks and shows one
tse_all_ranks <- agglomerateByRanks(tse)
altExpNames(tse_all_ranks)
altExp(tse_all_ranks, "Phylum")

# Agglomerate by prevalence
tse_prevalence <- agglomerateByPrevalence(tse)
altExp(tse, "prevalent") <- agglomerateByPrevalence(tse)

# Show column variables and merges the data based on one
colData(tse) |> colnames()
tse_variable <- agglomerateByVariable(tse, group = "SampleType", by = "cols")
```

## Transformation

These example solutions are related to exercises in [@sec-assay-transform].

```{r}
#| label: transformation
#| code-fold: true
#| code-summary: "Show the solution"

# Load the example dataset
library(mia)
library(miaViz)
data("GlobalPatterns")
tse <- GlobalPatterns

# Visualize counts
plotHistogram(tse, assay.type = "counts")

# Transformations on the counts assay
tse <- transformAssay(tse, assay.type = "counts", method = "relabundance")
tse <- transformAssay(tse, assay.type = "counts", method = "clr", pseudocount = 1)

assayNames(tse)

# Plots the two different assays
library(patchwork)
p1 <- plotHistogram(tse, assay.type = "counts")
p2 <- plotHistogram(tse, assay.type = "clr")

p1 + p2

# Subset the abundance table
clr_matrix <- assay(tse, "clr")
clr_matrix[1:10, 1:5]

# Agglomerate data by Phylum rank
tse_phylum <- agglomerateByRank(tse, rank = "Phylym")

# Apply transformation to Phylum data
tse_phylum <- altExp(tse, "Phylum")
tse_phylum <- transformAssay(
    tse_phylum, assay.type = "counts", method = "relabundance")
tse_phylum <- transformAssay(
    tse_phylum, assay.type = "counts", method = "clr", pseudocount = 1)

# phiLR transformation
tse <- transformAssay(
    tse, assay.type = "counts", method = "philr", MARGIN = 1L, pseudocount = TRUE)

assay(altExp(tse, "philr"))
```

## Community composition

These example solutions are related to exercises in [@sec-microbiome-community].

```{r}
#| label: composition
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Alpha Diversity

These example solutions are related to exercises in [@sec-alpha-diversity].

```{r}
#| label: alpha
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Community similarity

These exercises are related to exercises in [@sec-community-similarity].

```{r}
#| label: beta
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Community typing

These example solutions are related to exercises in [@sec-clustering].

```{r}
#| label: cluster
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Differential abundance

These example solutions are related to exercises in
[@sec-differential-abundance].

```{r}
#| label: daa
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Correlation

These example solutions are related to exercises in [@sec-correlation].

```{r}
#| label: correlation
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Mediation

These example solutions are related to exercises in [@sec-mediation].

```{r}
#| label: mediation
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Network learning & analysis

These example solutions are related to exercises in [@sec-network-learning].

```{r}
#| label: network1
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Network comparison

These example solutions are related to exercises in [@sec-network-comparison].

```{r}
#| label: network2
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Cross-association

These example solutions are related to exercises in [@sec-cross-correlation].

```{r}
#| label: cross-corr
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Ordination-based multiassay analysis

These example solutions are related to exercises in
[@sec-multiassay_ordination].

```{r}
#| label: mofa
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Multi-omics prediction and classification

These example solutions are related to exercises in
[@sec-multi-omics-integration].

```{r}
#| label: integratedlearner
#| code-fold: true
#| code-summary: "Show the solution"
    
```

## Machine learning

These example solutions are related to exercises in [@sec-machine_learning].

```{r}
#| label: ml
#| code-fold: true
#| code-summary: "Show the solution"
    
```
