# Data containers {#sec-containers}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
library(DT)
chapterPreamble()
```

This section provides an introduction to `TreeSummarizedExperiment (TreeSE)`
and `MultiAssayExperiment (MAE)` data containers introduced in
[@sec-microbiome-bioc]. In microbiome data science, these containers
link taxonomic abundance tables with rich side information on the features and
samples.

One key advantage of `SummarizedExperiment` ecosystem  is its flexibility and
generality. While taxonomic features remain central in microbiome studies, there
is growing interest in analyzing and integrating diverse types of features.
These may include:

- **Taxonomic features** (also referred to as taxa, microbes, or
taxonomic profile), typically obtained through 16S rRNA amplicon sequencing,
shotgun metagenomic sequencing, or phylogenetic microarrays. These represent the
composition and abundance of microbial taxa within a sample.

- **Functional features** (also known as gene abundance, pathway abundance, or
functional profile), usually derived from shotgun metagenomic sequencing. These
describe the functional potential of microbial communities within a sample.

- **Transcriptomic features** (or metatranscriptomic profile),
typically obtained using metatranscriptomic sequencing (RNA-seq). These capture
the actively expressed genes in microbial communities and reflect functional
activity within a sample.

- **Metabolomic features**, typically obtained
using mass spectrometry (MS) or nuclear magnetic resonance (NMR). These
represent small molecules produced or consumed by the microbiome within a
sample.

- **Proteomic features**, typically obtained using mass spectrometry (MS). These
capture the expressed proteins in a sample and reflect microbial activity within
a sample.

In addition, these data tables often exist in multiple versions, derived through
transformations or agglomerations. We start by providing recommendations
on how to represent different varieties of multi-table data within the
`TreeSE` class. The options and recommendations are summarized in
[@tbl-options].

## Structure of `TreeSE`

`TreeSE` contains several distinct slots, each holding a specific type of data.
The `assays` slot is the core of `TreeSE`, storing abundance tables that
contain the counts or concentrations of features in each sample.
Features can be taxonomic, metabolomic, antimicrobial resistance genes, or other
measured entities, and are represented as rows. The columns correspond to
unique samples.

Building upon the `assays`, `TreeSE` accommodates various data types for both
features and samples. In `rowData`, the rows correspond to the same features
(rows) as in the abundance tables, while the columns represent variables such as
taxonomy ranks. Similarly, in `colData`, each row matches the samples (columns)
from the abundance tables, with the columns of `colData` containing metadata
like disease status or patient ID and time point if the dataset includes time
series.

The slots in `TreeSE` are outlined below:

- `assays`: Stores a list of abundance tables. Each table has consistent rows and columns, where rows represent features and columns represent samples.
- `rowData`: Contains metadata about the rows (features). For example, this slot can include a taxonomy table.
- `colData`: Holds metadata about the columns (samples), such as patient information or the time points when samples were collected.
- `rowTree`: Stores a hierarchical tree for the rows, such as a phylogenetic tree representing the relationships between features.
- `colTree`: Includes a hierarchical tree for the columns, which can represent relationships between samples, for example, indicating whether patients are relatives and the structure of those relationships.
- `rowLinks`: Contains information about the linkages between rows and the nodes in the `rowTree`.
- `colLinks`: Contains information about the linkages between columns and the nodes in the `colTree`.
- `referenceSeq`: Holds reference sequences, i.e., the sequences that correspond to each taxon identified in the rows.
- `metadata`: Contains metadata about the experiment, such as the date it was conducted and the researchers involved.

These slots are illustrated in the figure below:

![The structure of TreeSummarizedExperiment (TreeSE) object [@Huang2021].](figures/treese.png){width="80%"}

Additionally, TreeSE includes:

- `reducedDim`: Contains reduced dimensionality representations of the samples, such as Principal Component Analysis (PCA) results (see [@sec-community-similarity].
- `altExp`: Stores alternative experiments, which are `TreeSE` objects sharing the same samples but with different feature sets.

Among these, `assays`, `rowData`, `colData`, and `metadata` are shared with the
`SummarizedExperiment` (`SE`) data container. `reducedDim` and `altExp` come
from inheriting the `SingleCellExperiment` (`SCE`) class. The `rowTree`,
`colTree`, `rowLinks`, `colLinks`, and `referenceSeq` slots are unique to
`TreeSE`.

## Rows and columns {#sec-rows-and-cols}

Let us load example data and store it in variable `tse`.

```{r}
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns
tse
```

The `TreeSE` object, similar to a standard `data.frame` or `matrix`, has rows
and columns. Typically, samples are stored in columns, while features
are stored in rows. You can extract subsets of the data, such as the first
five rows (first five features) and certain three columns
(certain three samples). 
The object manages the linkages between data (e.g., the assay data and the
sample metadata), ensuring that when you subset the data object, all its parts 
are subsetted simultaneously, such that they remain matched with each other.

```{r}
#| label: subset_intro

tse <- tse[1:5, c(1, 19, 16)]
tse
```

Compared to the original data the dimensions are for rows and columns 5 and 3,
respectively.

::: {.callout-note}
## Note

`SummarizedExperiment` objects have rows and columns.
Also `MultiAssayExperiment`, introduced in [@sec-mae] have rows and cols but
the structure is more complicated. You can find more examples on subsetting
from [@sec-treese_subsetting].

:::

## Assay data {#sec-assay-slot}

When studying microbiomes, the primary type of data is in the form of abundance
of given microbes in given samples. This sample per feature table
forms the core of the TreeSE object, called the  ‘the assay data’ .

An assay is a measurement of the presence and abundance of different taxxonomic
features in a sample. The assay data records this in a table where rows are
unique features and columns are unique samples and each entry contain
a number  describing how many of a given feature is present in a given sample.
Note that  when storing assays, the original data is count-based. However, due
to the  nature of how microbiome data is produced, these count-based abundances
rarely  reflect the true counts of features in the sample, and thus
the abundance  tables often undergo different transformations, such as
logarithmic, Centered  Log-Ratio (CLR), or relative abundance to make these
abundance values comparable  with each other. See[@sec-assay-transform] for more
information on transformations.

The microbial abundance tables are stored in _**assays**_. The assays slot 
contains the abundance data as multiple count matrices. The result of assays
is a list of matrices.

```{r}
assays(tse)
```

Individual assays can be accessed via `assay`.

```{r}
assay(tse, "counts") |> head()
```

So, in summary, in the world of microbiome analysis, an assay is essentially
a way to describe the composition of microbes in a given sample. This way we
can summarise the microbiome profile of a human gut or a sample of soil. 

Furthermore, to illustrate the use of multiple assays, we can create an empty
matrix and add it to the object.

```{r}
mat <- matrix(nrow = nrow(tse), ncol = ncol(tse))
assay(tse, "empty_table", withDimnames=FALSE) <- mat
assays(tse)
```

Now there are two assays available in the `tse` object, `counts` and
`empty_table`.

```{r}
assay(tse, "empty_table") |> head()
```

Here the dimension of the assay data remains unchanged. This is in fact
a requirement for the assays.

## colData

`colData` contains information about the samples used in the study. This
sample metadata can include details such as the sample ID, the primers used in
the analysis, the barcodes associated with the sample (truncated or complete),
the type of sample (e.g. soil, fecal, mock) and a description of the sample.

```{r coldata}
colData(tse)
```

To illustrate, ***X.SampleID*** gives the sample identifier, ***SampleType***
indicates the sample type (e.g. soil, fecal matter, control) and
***Description*** provides an additional description of the sample.

## rowData {#sec-rowData}

`rowData` contains data on the features, such as taxonomic features of the
analyzed samples. This is particularly important in the microbiome field for
storing taxonomic information, such as the Species, Genus or Family of the
different  microorganisms present in samples. This taxonomic information is
extremely important for understanding the composition and diversity of the
microbiome in each sample.


```{r rowdata}
rowData(tse)
```

## rowTree

Phylogenetic trees play an important role in the microbiome field. Many times it 
is useful to know how closely related the taxonomic features present in the data
are. For example, to calculate widely-used phylogenetically weighted microbiome 
dissimilarity metrics such as UniFrac, we need information
on not only the presence and abundance of taxonomic features in each sample but 
also the evolutionary relatedness among these taxonomic features. The `TreeSE`
class can  keep track of relations among features via two functions, 
`rowTree` and `rowLinks`.

A tree can be accessed via `rowTree` as `phylo` object.

```{r rowtree}
rowTree(tse)
```

Each row in `TreeSE` is linked to a specific node in a tree. This relationship
is stored in the `rowLinks` slot, which has the same  rows as `TreeSE`.
The `rowLinks` slot contains information about which tree node corresponds to
each row and whether the node is a leaf (tip) or an internal node, among other
details.

```{r rowlinks}
rowLinks(tse)
```

Please note that there can be a 1:1 relationship between tree nodes and
features, but this is not a must-have. This means there can be features that
are not linked to nodes, and nodes that are not linked to features. To change
the links in an existing object, the `changeTree()` function is available.

## Alternative Experiments {#sec-alt-exp}

_**Alternative experiments**_  (`altExp`) complement _assays_. They can contain
complementary data, which is no longer tied to the same dimensions as
the assay data. However, the number of samples (columns) must be the
same.

This can come into play, for instance, when one has taxonomic
abundance profiles quantified using different measurement technologies,
such as phylogenetic microarrays, amplicon sequencing, or metagenomic
sequencing. Another common use case is including abundance tables for
different taxonomic ranks. Such alternative experiments concerning the
same set of samples can be stored as

1. Separate _assays_ assuming that the taxonomic information can be mapped 
between features directly 1:1; or 
2. Data in the `altExp` slot of the `TreeSE`, if the feature 
dimensions differ. Each element of the `altExp` slot is a `SE`
or an object from a derived class with independent feature data.

The following shows how to store taxonomic abundance tables
agglomerated at different taxonomic levels. However, the data could as
well originate from entirely different measurement sources (e.g., 16S 
amplicon and metagenomic sequence data) as long as the samples match.

Let us first subset the data so that it has only two rows.

```{r altexp_agglomerate}
tse_sub <- tse[1:2, ]
# Both have the same number of columns (samples)
dim(tse)
dim(tse_sub)
```

Then we can add the new data object as an alternative experiment in the
original data.

```{r altexp_agglomerate2}
# Add the new data object to the original data object as an alternative
# experiment with the specified name
altExp(tse, "subsetted") <- tse_sub

# Retrieve and display the names of alternative experiments available
altExpNames(tse)
```

Now, if we subset the data, this acts on both the `altExp` and the assay data.

```{r altexp_agglomerate3}
tse_single_sample <- tse[, 1]
dim(altExp(tse_single_sample,"subsetted"))
```

For more details on _altExp_, you can check the
[introduction](https://bioconductor.org/packages/release/bioc/vignettes/SingleCellExperiment/inst/doc/intro.html)
to the `SingleCellExperiment` package [@R_SingleCellExperiment].

## Multiple experiments {#sec-mae}

_**Multiple experiments**_ relate to complementary measurement types from
the same samples, such as transcriptomic or metabolomic profiling of the 
microbiome. Multiple experiments can be represented using the same
options as alternative experiments, or by using the
`MAE` class [@Ramos2017]. Depending on how the
datasets relate to each other the data can be stored as:

1. `altExp` if the samples can be matched directly 1:1; or
2. As `MAE` objects, in which the connections between
samples are defined through a `sampleMap`. Each element on the
`ExperimentList` of an `MAE` is `matrix` or
`matrix`-like objects, including `SE` objects, and
the number of samples can differ between the elements.

In a `MAE`, the "subjects" represent patients. The `MAE` has four main slots,
with `experiments` being the core. This slot holds a list of experiments, each
in (`Tree`)`SE` format. To handle complex mappings between samples
(observations) across different experiments, the `sampleMap` slot stores
information about how each
sample in the experiments is linked to a patient. Metadata for each patient is
stored in the `colData` slot. Unlike the `colData` in `TreeSE`, this `colData`
is meant to store only metadata that remains constant throughout the trial.

- `experiments`: Contains experiments, such as different omics data, in TreeSE format.
- `sampleMap`: Holds linkages between patients (subjects) and samples in the experiments (observations).
- `colData`: Includes patient metadata that remains unchanged throughout the trial.

These slots are illustrated in the figure below:

![The structure of MultiAssayExperiment (MAE) object [@Ramos2017].](figures/mae.png){width="60%"}

Additionally, the object includes a `metadata` slot that contains information
about the dataset, such as the trial period and the creator of the `MAE` object.

The `MAE` object can handle more complex relationships between experiments.
It manages the linkages between samples and experiments, ensuring that
the data remains consistent and well-organized.

```{r}
#| label: show_mae

data("HintikkaXOData")
mae <- HintikkaXOData
mae
```

The `sampleMap` is a crucial component of the `MAE` object as it acts as an
important bookkeeper, maintaining the information about which samples are
associated with which experiments. This ensures that data linkages are
correctly managed and preserved across different types of measurements.

```{r}
#| label: show_mae2

sampleMap(mae) |> head()
```

For illustration, let's subset the data by taking first five samples.

```{r}
#| label: show_mae3

mae <- mae[ , 1:5, ]
mae
```

::: {.callout-note}
## Note

If you have multiple experiments containing multiple measures from same sources 
(e.g., patients/host, individuals/sites), you can utilize the `MultiAssayExperiment` 
object to keep track of which samples belong to which patient.

:::

The following dataset illustrates how to utilize the sample mapping system in
`MAE`. It includes two omics data: biogenic amines and fatty acids,
collected from 10 chickens.

```{r}
#| label: show_holofood_mae

mae <- readRDS(system.file("extdata", "mae_holofood.Rds", package = "OMA"))
mae
```

We can see that there are more than ten samples per omic dataset due to
multiple samples from different time points collected for some animals. 
From the `colData` of `MAE`, we can observe the individual animal metadata,
including information that remains constant throughout the trial.

```{r}
#| label: show_coldata_mae
colData(mae)
```

The `sampleMap` slot now contains mappings between each unique sample and the
corresponding individual animal. There are as many rows as there are total samples.

The "colname" column refers to the samples in the omic dataset identified in
the "assay" column, while the "primary" column provides information about the
animals. You will notice that some animals are listed multiple times,
reflecting the multiple omics and time points collected for those individuals.

```{r}
#| label: show_samplemap_mae

sampleMap(mae)
```

For information have a look at the
[intro vignette](https://bioconductor.org/packages/release/bioc/vignettes/MultiAssayExperiment/inst/doc/MultiAssayExperiment.html)
of the `MultiAssayExperiment` package.

::: {.callout-tip}
## Recommended options for storing multiple data tables in microbiome studies

   Option   Rows (features)    Cols (samples)               Recommended
---------   --------------    ---------------  ------------------------
   assays  	         match              match       Data transformations
   altExp             free              match    Alternative experiments
MultiAssay            free      free (mapping)    Multi-omic experiments

:
The _assays_ are best suited for data transformations (one-to-one match between
samples and columns across the assays). The _alternative experiments_ are
particularly suitable for alternative versions of the data that are of same
type but may have a different number of features (e.g. taxonomic groups); this
is for instance the case with taxonomic abundance tables agglomerated at
different levels (e.g. genus vs. phyla) or alternative profiling technologies
(e.g. amplicon sequencing vs. shallow shotgun metagenomics). For alternative
experiments one-to-one match between samples (cols) is libraryd but the
alternative experiment tables can have different numbers of features (rows).
Finally, elements of the _MAE_ provide the most flexible way to incorporate
multi-omic data tables with flexible numbers of samples and features. We
recommend these conventions as the basis for methods development and application
in microbiome studies. {#tbl-options}

Multi-assay analyses, discussed in sections [@sec-cross-correlation] and
[@sec-multiassay_ordination], can be facilitated by the multi-assay data
containers,
_TreeSummarizedExperiment_ and _MultiAssayExperiment_. These are
scalable and contain different types of data in a single container,
making this framework particularly suited for multi-assay microbiome
data incorporating different types of complementary data sources in a
single, reproducible workflow. An alternative experiment can be stored in
_altExp_ slot of the SE data container. Alternatively, both experiments can be
stored side-by-side in an `MAE` data container.

:::

::: {.callout-tip icon=false}
## Exercises

**Goal:** The goal of these exercises is to understand the elements and
structure of `TreeSE` object.

**Exercise 1: Assay retrieval**

1. Load any of the example datasets mentioned in [@sec-example-data].

2. List the names of all available assays. Which tables there are present?

3. Fetch the list of assays. How long the list is?

4. Retrieve the available assay as `matrix`. Briefly explore the data. Can you
see many zeroes? If so, why the data contains many zeroes?

**Exercise 2: Sample information**

1. Import the `mia` package, load any of the example datasets mentioned in
[@sec-example-data].

2. Check the names of the samples.

3. List the available columns in sample metadata.

4. Do the same now for the rows of sample metadata. What these names correspond?

5. Visualize the sample metadata with `View()` and briefly look at the
information stored in the different columns.

**Exercise 3: Feature information**

1. Import the `mia` package, load any of the example datasets mentioned in
[@sec-example-data].

2. Check the names of the features.

3. List the available columns in feature metadata or taxonomy table.

4. Do the same now for the rows of `rowData`. What these names correspond?

5. Visualize the feature metadata with `View()` and briefly look at the
information stored in the different columns.

**Exercise 4: Other elements**

Extract some of the other `TreeSE` elements listed in chapter [@sec-containers].
However, note that such data are not always included.

1. Import the mia package, load any of the example datasets mentioned in
[@sec-example-data].

2. Fetch the metadata of the `TreeSE`. Is there any information available?

3. Access the phylogenetic tree. How big is it in terms of tips and nodes?

4. Check if a sample tree is available.

5. If present, obtain the information on feature DNA sequences from the
`referenceSeq` slot.

Useful functions:

`data()`, `assayNames()`, `assays()`, ¸`assay()`, `colData()`, `rowData()`,
`rownames()`, `colnames()`, `rowTree()`, `colTree()`, `referenceSeq()`

:::